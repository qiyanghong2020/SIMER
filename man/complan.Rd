% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/breeding.R
\name{complan}
\alias{complan}
\title{Read and compare breeding plans}
\usage{
complan(simls = NULL, FR = NULL, index.wt = c(0.5, 0.5),
  decr = TRUE, selPath = NULL, verbose = TRUE)
}
\arguments{
\item{simls}{a list with all simer result information}

\item{FR}{list of fixed effects, random effects, and their combination}

\item{index.wt}{economic weights of selection index method, its length should equals to the number of traits}

\item{decr}{whether to sorting with decreasing}

\item{selPath}{the path of breeding_plan}

\item{verbose}{whether to print details}
}
\value{
None
}
\description{
Build date: Nov 14, 2018
Last update: Jul 31, 2019
}
\examples{
\donttest{
# get map file, map is neccessary
data(simdata)

# combination of fixed effects
cmb.fix <- list(tr1 = c("mu", "gen", "sex", "a"), # trait 1
                tr2 = c("mu", "diet", "season")) # trait 2
      
fix <- list( 
         mu = list(level = "mu", eff = 20),  				      
        gen = FALSE,         
        sex = list(level = c("1", "2"), eff = c(50, 30)), 
       diet = list(level = c("d1", "d2", "d3"), eff = c(10, 20, 30)),
     season = list(level = c("s1", "s2", "s3", "s4"), eff = c(10, 20, 30, 20)), 
          a = list(level = c("a1", "a2", "a3"), eff = c(10, 20, 30))) 
          
# combination and ralation of random effects
tr1 <- list(rn = c("PE"), ratio = 0.1)
tr2 <- list(rn = c("litter", "b"), ratio = c(0.1, 0.1))          
cmb.rand <- list(tr1 = tr1, tr2 = tr2)   
      
rand <- list(       
         PE = list(level = paste0("p", 1:50), eff = rnorm(50)), 
     litter = list(level = paste0("l", 1:50), eff = rnorm(50)),    
          b = list(level = paste0("b", 1:50), eff = rnorm(50)))      
  
FR <- list(cmb.fix = cmb.fix, fix = fix, cmb.rand = cmb.rand, rand = rand)
selPath <- system.file("extdata", "01breeding_plan", package = "simer")

# run simer
simer.list <-
     simer(num.gen = 6,
           replication = 1,
           verbose = TRUE, 
           mrk.dense = TRUE,
           incols = 2, 
           outcols = 2, 
           out = "simer", 
           outpath = NULL,
           selPath = NULL, 
           out.format = "numeric",
           seed.sim = runif(1, 0, 100),
           out.geno.gen = 1:6,
           out.pheno.gen = 1:6,
           rawgeno1 = rawgeno,
           rawgeno2 = NULL,
           rawgeno3 = NULL,
           rawgeno4 = NULL,
           num.ind = NULL,
           prob = c(0.5, 0.5),
           input.map = input.map,
           len.block = 5e7,
           range.hot = 4:6,
           range.cold = 1:5,
           rate.mut = 1e-8,
           cal.model = "A",
           FR = FR, 
           h2.tr1 = c(0.3, 0.1, 0.05, 0.05, 0.05, 0.01),
           num.qtn.tr1 = 18,
           sd.tr1 = c(2, 1, 0.5, 0.5, 0.5, 0.1),
           dist.qtn.tr1 = rep("normal", 6),
           prob.tr1 = rep(0.5, 6),
           shape.tr1 = rep(1, 6),
           scale.tr1 = rep(1, 6),
           multrait = FALSE,
           num.qtn.trn = matrix(c(18, 10, 10, 20), 2, 2),
           sd.trn = matrix(c(1, 0, 0, 2), 2, 2),
           gnt.cov = matrix(c(1, 2, 2, 16), 2, 2),
           h2.trn = c(0.3, 0.5), 
           qtn.spot = rep(0.1, 10),
           maf = 0,
           sel.crit = "pheno",
           sel.on = FALSE, 
           mtd.reprod = "randmate",
           userped = userped,
           num.prog = 2,
           ratio = 0.5,
           prog.tri = 2,
           prog.doub = 2,
           prog.back = rep(2, 5),
           ps = rep(0.8, 2),
           decr = TRUE,
           sel.multi = "index",
           index.wt = c(0.5, 0.5),
           index.tdm = 1,
           goal.perc = 0.1,
           pass.perc = 0.9, 
           sel.sing = "comb") 

goal.plan <- complan(simls = simer.list, FR = FR, index.wt = c(0.5, 0.5), 
                     decr = TRUE, selPath = selPath, verbose = TRUE)
str(goal.plan)
}
}
\author{
Dong Yin
}
